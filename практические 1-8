лаба 1:
x = int(input('введите число'))
if((x >=-1) and (x < 3)) or ((x>=7) and (x<9)):
     print( ' nice ')
else:
     print( ' bad ')

лаба 2:
import math
t = float(input('Введите число: '))
a = 2*(t-1)
b = 3*t
c = 2*t+3
D = b*b - 4*a*c
if D > 0:
    if t != 1:
        x1 =(-b-math.sqrt(D))/(2*a)
        print('Первый корень =', x1)
        x2 =(-b+math.sqrt(D))/(2*a)
        print('Второй корень =', x2)
    else:
        print('Корень x =', -5/3)
elif D == 0:
    x1 = -b /2*a
    print('Единсвенный корень',x1)
elif D<0:
    print('Корней нет')

лаба 3:
x = int(input('Введите число х: '))
y = int(input('Введите число y: '))
z = int(input('Введите число z: '))
a = int(input('Введите число a: '))
b = int(input('Введите число b: '))
k = 0
if (x < a) or (x > b):
    print(x, 'не входит в интервал')
    k += 1
if (y < a) or (y > b):
    print(y, 'не входит в интервал')
    k += 1
if (z < a) or (z > b):
    print(z, 'не входит в интервал')
    k += 1
print(k, 'количество чисел')


лаба 4:
import math as m
ymin = 0
ymax = 0
for x in range(-5,6):
    y=2*x**4-16*x**3+27*x**2+40*x-4
    if ymin < y:
        ymin = y
    if ymax > y:
        ymax = y
print('Минимальное число =', ymin, 'Максимально число =', ymax)


лаба 5:
def uk(x, k):
    return (-1)**k * x**k/(k+1)*(k+3)
x_values = [0.1, 0.3, 0.4, 0.7, 1.0]
n = 10
for x in x_values:
    S = 0
    for k in range(1, n + 1):
        S += uk(x, k)
    print(':    X =', f"{x:.1f}", '     S =',f"{S:.6f}", '  :')
    print('-----------------------------------')


лаба 6:
C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]

chetniy = 0
nechetniy = 0

for i, element in enumerate(C):
        if i % 2 == 0:
                chetniy += element
        else:
                nechetniy += element
print('Массив С:', C)

print("Сумма четных :", chetniy)
print("Сумма нечетных:", nechetniy)

if chetniy > nechetniy:
        print("Большая сумма: sum_even_index =", chetniy)
else:
        print("Большая сумма: sum_odd_index =", nechetniy)


лаба7:
import numpy as np
matrixA = np.array([[1, 2, 3],
                    [1, 2, 1],
                    [3, 2, 0]])

matrixB = np.array([[4, 1, 2],
                    [0, 4, 3],
                    [1, 1, 1]])

matrixp = np.array([[0.1],
                    [1.7],
                    [-1.5]])

matrixq = np.array([[-1.6],
                    [0.8],
                    [1.1]])

matrixr = np.array([[-0.7],
                    [1.9],
                    [0.2]])


S = np.dot(np.dot(matrixB,matrixr)-np.dot(matrixA,matrixp).T, (matrixq-matrixp))
print(S)

лаба 8 (1)

import numpy as np  # Импорт библиотеки numpy для работы с матрицами

# Ввод значений переменных S, G, K с клавиатуры
S = int(input("Введите значение переменной S: "))
G = int(input("Введите значение переменной G: "))
K = int(input("Введите значение переменной K: "))

# Создание матрицы коэффициентов уравнений A и вектора правых частей B
A = np.array([[1, 5, 1],
              [4, -1, 1],
              [S, G, 2*(S+G+K)]])  # Матрица коэффициентов

B = np.array([(S-G+K+10), (S-G+4*K-2), (2*np.floor((S-G)*(S+G+K)+G)+K*S)])  # Вектор правых частей

# Вывод матрицы A и вектора B для отладки
print(A)
print(B)

# Решение системы линейных уравнений Ax = B с помощью np.linalg.solve()
reshenie = np.linalg.solve(A, B)

# Вывод решения системы уравнений
print("Решение системы уравнений:", reshenie)

лаба 8 (2)
import numpy as np  # Импорт библиотеки numpy для работы с матрицами

S = int(input())  # Ввод значения переменной S с клавиатуры
G = int(input())  # Ввод значения переменной G с клавиатуры
K = int(input())  # Ввод значения переменной K с клавиатуры

# Создание матрицы A с помощью numpy.array. Это трехстрочная матрица, где каждая строка - это список,
# содержащий коэффициенты при неизвестных в уравнении.
A = np.array([[1, 5, 1],
              [4, -1, 1],
              [S, G, 2*(S+G+K)]])

# Вычисление определителя матрицы A с помощью функции np.linalg.det().
opredelitel = np.linalg.det(A)
print(opredelitel)  # Вывод определителя на экран

# Вычисление обратной матрицы A с помощью функции np.linalg.inv().
new_matrix = np.linalg.inv(A)
print(new_matrix)  # Вывод обратной матрицы на экран

